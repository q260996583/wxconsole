package com.jiuyv.yl.console.orgmngr.entity ;

// Generated by AutoCode4J
/**
 * EntityBean: 交易应答位图配置表  TBL_CORE_TXNBITMAP : TBL_CORE_TXNBITMAP
 * This is a value object(VO). 
 * Description: 
 * 
 * @author AutoCode4J
 * @version 1.0
 */
public class CoreTxnbitmapVo implements java.io.Serializable {

	/** default Serial Version UID*/
	private static final long serialVersionUID = 1L;
	// -- Fields --
	/** msgTypeReq : 请求消息类型. MSG_TYPE_REQ: VARCHAR2(10) */
	private String msgTypeReq ;
	
	/** procCode : 交易处理码(3域). PROC_CODE: VARCHAR2(6) */
	private String procCode ;
	
	/** condCode : 服务点条件码(25). COND_CODE: VARCHAR2(2) */
	private String condCode ;
	
	/** txnTypeCode : 交易类型码(60.1). TXN_TYPE_CODE: VARCHAR2(2) */
	private String txnTypeCode ;
	
	/** netCode : 网络管理信息码(60.3). NET_CODE: VARCHAR2(3) */
	private String netCode ;
	
	/** txnCode : 内部交易代码. TXN_CODE: VARCHAR2(6) */
	private String txnCode ;
	
	/** txnName : 交易名称. TXN_NAME: VARCHAR2(60) */
	private String txnName ;
	
	/** msgTypeRsp : 应答消息类型. MSG_TYPE_RSP: VARCHAR2(10) */
	private String msgTypeRsp ;
	
	/** reqMinBitmap : 请求最小位图. REQ_MIN_BITMAP: VARCHAR2(32) */
	private String reqMinBitmap ;
	
	/** reqMaxBitmap : 请求最大位图. REQ_MAX_BITMAP: VARCHAR2(32) */
	private String reqMaxBitmap ;
	
	/** resMaxBitmap : 响应最大位图. RES_MAX_BITMAP: VARCHAR2(32) */
	private String resMaxBitmap ;
	
	/** resMinBitmap : 响应最小位图. RES_MIN_BITMAP: VARCHAR2(32) */
	private String resMinBitmap ;
	
	/** rejBitmap : 拒绝位图. REJ_BITMAP: VARCHAR2(32) */
	private String rejBitmap ;
	
	/** ckReqBitmap : 检查请求位图标识. CK_REQ_BITMAP: VARCHAR2(2) */
	private String ckReqBitmap ;
	
	/** ckMacSign : MAC验证标识. CK_MAC_SIGN: VARCHAR2(2) */
	private String ckMacSign ;
	
	/** finDir : 资金方向. FIN_DIR: VARCHAR2(2) */
	private String finDir ;
	
	/** status : 状态. STATUS: VARCHAR2(2) */
	private String status ;
	
	/** tidTxnType : 机具交易类型位置. TID_TXN_TYPE: NUMBER(2) */
	private Long tidTxnType ;
	
	private boolean check;
	
	// -- Constructor --
	/**
	 * Constructor
	 * 
	 */
	public CoreTxnbitmapVo() {
		// Default Construtor
	}
	
	public CoreTxnbitmapVo(String msgTypeReq, String procCode, String condCode, String txnTypeCode, String netCode) {
		this.msgTypeReq = msgTypeReq;
		this.procCode = procCode;
		this.condCode = condCode;
		this.txnTypeCode = txnTypeCode;
		this.netCode = netCode;
	}
		
	// -- Setter And Getter
	/**
	 * Set msgTypeReq : 请求消息类型. MSG_TYPE_REQ: VARCHAR2(10) 
	 */
	public void setMsgTypeReq(String msgTypeReq){
		this.msgTypeReq = msgTypeReq;	
	}
	
	/**
	 * Get msgTypeReq : 请求消息类型. MSG_TYPE_REQ: VARCHAR2(10) 
	 */
	public String getMsgTypeReq(){
		return this.msgTypeReq;	
	}
	
	/**
	 * Set procCode : 交易处理码(3域). PROC_CODE: VARCHAR2(6) 
	 */
	public void setProcCode(String procCode){
		this.procCode = procCode;	
	}
	
	/**
	 * Get procCode : 交易处理码(3域). PROC_CODE: VARCHAR2(6) 
	 */
	public String getProcCode(){
		return this.procCode;	
	}
	
	/**
	 * Set condCode : 服务点条件码(25). COND_CODE: VARCHAR2(2) 
	 */
	public void setCondCode(String condCode){
		this.condCode = condCode;	
	}
	
	/**
	 * Get condCode : 服务点条件码(25). COND_CODE: VARCHAR2(2) 
	 */
	public String getCondCode(){
		return this.condCode;	
	}
	
	/**
	 * Set txnTypeCode : 交易类型码(60.1). TXN_TYPE_CODE: VARCHAR2(2) 
	 */
	public void setTxnTypeCode(String txnTypeCode){
		this.txnTypeCode = txnTypeCode;	
	}
	
	/**
	 * Get txnTypeCode : 交易类型码(60.1). TXN_TYPE_CODE: VARCHAR2(2) 
	 */
	public String getTxnTypeCode(){
		return this.txnTypeCode;	
	}
	
	/**
	 * Set netCode : 网络管理信息码(60.3). NET_CODE: VARCHAR2(3) 
	 */
	public void setNetCode(String netCode){
		this.netCode = netCode;	
	}
	
	/**
	 * Get netCode : 网络管理信息码(60.3). NET_CODE: VARCHAR2(3) 
	 */
	public String getNetCode(){
		return this.netCode;	
	}
	
	/**
	 * Set txnCode : 内部交易代码. TXN_CODE: VARCHAR2(6) 
	 */
	public void setTxnCode(String txnCode){
		this.txnCode = txnCode;	
	}
	
	/**
	 * Get txnCode : 内部交易代码. TXN_CODE: VARCHAR2(6) 
	 */
	public String getTxnCode(){
		return this.txnCode;	
	}
	
	/**
	 * Set txnName : 交易名称. TXN_NAME: VARCHAR2(60) 
	 */
	public void setTxnName(String txnName){
		this.txnName = txnName;	
	}
	
	/**
	 * Get txnName : 交易名称. TXN_NAME: VARCHAR2(60) 
	 */
	public String getTxnName(){
		return this.txnName;	
	}
	
	/**
	 * Set msgTypeRsp : 应答消息类型. MSG_TYPE_RSP: VARCHAR2(10) 
	 */
	public void setMsgTypeRsp(String msgTypeRsp){
		this.msgTypeRsp = msgTypeRsp;	
	}
	
	/**
	 * Get msgTypeRsp : 应答消息类型. MSG_TYPE_RSP: VARCHAR2(10) 
	 */
	public String getMsgTypeRsp(){
		return this.msgTypeRsp;	
	}
	
	/**
	 * Set reqMinBitmap : 请求最小位图. REQ_MIN_BITMAP: VARCHAR2(32) 
	 */
	public void setReqMinBitmap(String reqMinBitmap){
		this.reqMinBitmap = reqMinBitmap;	
	}
	
	/**
	 * Get reqMinBitmap : 请求最小位图. REQ_MIN_BITMAP: VARCHAR2(32) 
	 */
	public String getReqMinBitmap(){
		return this.reqMinBitmap;	
	}
	
	/**
	 * Set reqMaxBitmap : 请求最大位图. REQ_MAX_BITMAP: VARCHAR2(32) 
	 */
	public void setReqMaxBitmap(String reqMaxBitmap){
		this.reqMaxBitmap = reqMaxBitmap;	
	}
	
	/**
	 * Get reqMaxBitmap : 请求最大位图. REQ_MAX_BITMAP: VARCHAR2(32) 
	 */
	public String getReqMaxBitmap(){
		return this.reqMaxBitmap;	
	}
	
	/**
	 * Set resMaxBitmap : 响应最大位图. RES_MAX_BITMAP: VARCHAR2(32) 
	 */
	public void setResMaxBitmap(String resMaxBitmap){
		this.resMaxBitmap = resMaxBitmap;	
	}
	
	/**
	 * Get resMaxBitmap : 响应最大位图. RES_MAX_BITMAP: VARCHAR2(32) 
	 */
	public String getResMaxBitmap(){
		return this.resMaxBitmap;	
	}
	
	/**
	 * Set resMinBitmap : 响应最小位图. RES_MIN_BITMAP: VARCHAR2(32) 
	 */
	public void setResMinBitmap(String resMinBitmap){
		this.resMinBitmap = resMinBitmap;	
	}
	
	/**
	 * Get resMinBitmap : 响应最小位图. RES_MIN_BITMAP: VARCHAR2(32) 
	 */
	public String getResMinBitmap(){
		return this.resMinBitmap;	
	}
	
	/**
	 * Set rejBitmap : 拒绝位图. REJ_BITMAP: VARCHAR2(32) 
	 */
	public void setRejBitmap(String rejBitmap){
		this.rejBitmap = rejBitmap;	
	}
	
	/**
	 * Get rejBitmap : 拒绝位图. REJ_BITMAP: VARCHAR2(32) 
	 */
	public String getRejBitmap(){
		return this.rejBitmap;	
	}
	
	/**
	 * Set ckReqBitmap : 检查请求位图标识. CK_REQ_BITMAP: VARCHAR2(2) 
	 */
	public void setCkReqBitmap(String ckReqBitmap){
		this.ckReqBitmap = ckReqBitmap;	
	}
	
	/**
	 * Get ckReqBitmap : 检查请求位图标识. CK_REQ_BITMAP: VARCHAR2(2) 
	 */
	public String getCkReqBitmap(){
		return this.ckReqBitmap;	
	}
	
	/**
	 * Set ckMacSign : MAC验证标识. CK_MAC_SIGN: VARCHAR2(2) 
	 */
	public void setCkMacSign(String ckMacSign){
		this.ckMacSign = ckMacSign;	
	}
	
	/**
	 * Get ckMacSign : MAC验证标识. CK_MAC_SIGN: VARCHAR2(2) 
	 */
	public String getCkMacSign(){
		return this.ckMacSign;	
	}
	
	/**
	 * Set finDir : 资金方向. FIN_DIR: VARCHAR2(2) 
	 */
	public void setFinDir(String finDir){
		this.finDir = finDir;	
	}
	
	/**
	 * Get finDir : 资金方向. FIN_DIR: VARCHAR2(2) 
	 */
	public String getFinDir(){
		return this.finDir;	
	}
	
	/**
	 * Set status : 状态. STATUS: VARCHAR2(2) 
	 */
	public void setStatus(String status){
		this.status = status;	
	}
	
	/**
	 * Get status : 状态. STATUS: VARCHAR2(2) 
	 */
	public String getStatus(){
		return this.status;	
	}
	
	/**
	 * Set tidTxnType : 机具交易类型位置. TID_TXN_TYPE: NUMBER(2) 
	 */
	public void setTidTxnType(Long tidTxnType){
		this.tidTxnType = tidTxnType;	
	}
	
	/**
	 * Get tidTxnType : 机具交易类型位置. TID_TXN_TYPE: NUMBER(2) 
	 */
	public Long getTidTxnType(){
		return this.tidTxnType;	
	}

	public boolean isCheck() {
		return check;
	}

	public void setCheck(boolean check) {
		this.check = check;
	}
	
}